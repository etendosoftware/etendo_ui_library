pipeline {
    options {
        // This limits build concurrency to 1 per branch
        disableConcurrentBuilds()
    }

    environment {
        NPM_TOKEN           = credentials("npmjs-access-token")
        EMAIL_ADDRESS       = credentials("email_builds")
        REPO_URL            = "git@github.com:etendosoftware/etendo_ui_library.git"
        URL_REPO            = "https://github.com/etendosoftware/etendo_ui_library"
        REPO_NAME           = "etendo_ui_library"
        GITHUB_USER         = "etendobot"
        GITHUB_EMAIL        = credentials("email_noreply")
        ACCESS_TOKEN        = credentials("access_token_github")
        OWNER_REPOSITORY    = "etendosoftware"
        CONTEXT_BUILD       = "Etendo UI Library Test"

        SUCCESS             = "SUCCESS"
        FAILED              = "FAILED"
        UNSTABLE            = "UNSTABLE"

        COMMIT_STATUS_PENDING  = "pending"
        COMMIT_STATUS_SUCCESS  = "success"
        COMMIT_STATUS_FAILURE  = "failure"

    }

    agent {
        kubernetes {
            inheritFrom 'jenkins-ui-library'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-ui-library
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-ui-library
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.6
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 1048m
          memory: 2000Mi
        requests:
          cpu: 1048m
          memory: 2000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      securityContext:
        readOnlyRootFilesystem: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
    """
        }
    }

    stages {
        stage('Build Environment') {
            when {
                expression {
                    ISUPGRADECOMMIT = sh (script: "git log -1 | grep 'Upgrade version to'", returnStatus: true)
                    ISUPGRADECOMMIT != 0
                }
            }
            steps {
                container('compiler') {
                    script {
                        try {
                            env.STATUSBUILD = "1"
                            sh "./pipelines/utils/build-update.sh ${REPO_NAME} ${COMMIT_STATUS_PENDING} \"Starting Build\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                            withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                                sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone ${REPO_URL} etendo_ui_library'
                                dir("etendo_ui_library") {
                                    sh "git checkout ${GIT_COMMIT}"
                                    echo "....Building Environment...."
                                    sh "curl -sL https://deb.nodesource.com/setup_16.x | bash -"
                                    sh "apt-get install -y nodejs"
                                    sh 'npm install -g yarn'
                                    sh 'npm config set registry "https://registry.npmjs.org/"'
                                    sh 'npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN'
                                    sh 'yarn install'
                                    sh 'yarn build'
                                    echo "....Build Succesful...."
                                    def rootDir = pwd()
                                    def infoCommit = load "${rootDir}/pipelines/utils/infoCommits.groovy"
                                    env.URL_ORG_GITHUB = "${URL_REPO}"
                                    def commitInfoTemplate = infoCommit.generateCommitInfo(env.URL_ORG_GITHUB, null, REPO_NAME, true, null)
                                    env.COMMIT_INFO_TEMPLATE = "${commitInfoTemplate}"
                                    echo "${env.COMMIT_INFO_TEMPLATE}"
            
                                }
                            }
                        } catch (Exception e) {
                            echo "Exception occurred: " + e.toString()
                            echo "....FAILED Build...."
                            currentBuild.result = FAILED
                            error('BUILD FAILED')
                            env.STATUSBUILD = "0"
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                expression {
                    ISUPGRADECOMMIT != 0
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                container('compiler') {
                    script {
                        dir("etendo_ui_library") {
                            try {
                                sh "./pipelines/utils/build-update.sh ${REPO_NAME} ${COMMIT_STATUS_PENDING} \"Running Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
                                env.STATUSTEST = "1"
                                echo "....Running Tests...."
                                sh "yarn test"
                                echo "....Tests Succesful...."
                            } catch (Exception e) {
                                echo "Exception occurred: " + e.toString()
                                echo "....FAILED Tests...."
                                currentBuild.result = UNSTABLE
                                unstable('TESTS FAILED')
                                env.STATUSTEST = "0"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Publish Next Version') {
            when {
                allOf {
                    branch 'develop'
                    expression {
                        ISUPGRADECOMMIT != 0
                        env.STATUSTEST == "1"
                    }
                }
            }
            steps {
                container('compiler') {
                    script {
                        dir("etendo_ui_library") {
                            try {
                                withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                                    sh """
                                    git config user.name ${GITHUB_USER}
                                    git config user.email ${GITHUB_EMAIL}
                                    """
                                    echo "....Publishing Next Version...."
                                    sh "git checkout $GIT_BRANCH"
                                    sh 'yarn config set version-git-message "Upgrade version to %s :zap:"'
                                    sh 'yarn version --patch'
                                    sh "npm publish --tag next --access public"
                                    sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git push $GIT_URL'
                                }
                            } catch (Exception e) {
                              echo "Exception occurred: " + e.toString()
                              echo "....FAILED Publish Version...."
                              currentBuild.result = FAILED
                              error('BUILD FAILED')
                              env.STATUSBUILD = "0"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                sh "./pipelines/utils/build-update.sh ${REPO_NAME} ${COMMIT_STATUS_SUCCESS} \"Tests Successful\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            }
        }
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "âœ… Errors Fixed on ${currentBuild.fullDisplayName} on ${GIT_BRANCH} branch",
            mimeType: "text/html",
            body: """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">âœ… ERRORS FIXED âœ…</h2>

                        ${env.COMMIT_INFO_TEMPLATE}

                        <p>The problems found in the previous run/s have been fixed! ðŸ’ª<br>
                        Check out the output in the following link: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
        unstable {
            script {
                sh "./pipelines/utils/build-update.sh ${REPO_NAME} ${COMMIT_STATUS_FAILURE} \"Tests Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            }
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš¨ Failed Tests of '${REPO_NAME}' on '${GIT_BRANCH}' branch",
            mimeType: "text/html",
            body: """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">ðŸš¨ BUILD UNSTABLE ðŸš¨</h2>

                        ${env.COMMIT_INFO_TEMPLATE}

                        <p>Some tests have failed.<br>
                        Check out the output in the following link: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
        failure {
            script {
                sh "./pipelines/utils/build-update.sh ${REPO_NAME} ${COMMIT_STATUS_FAILURE} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            }
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš« Build Failed in ${currentBuild.fullDisplayName} on '${GIT_BRANCH}' branch",
            mimeType: "text/html",
            body: """
                <html>
                    <head>
                        <style>
                            body { font-family: 'Arial', sans-serif; }
                            .header { font-size: 16px; font-weight: bold; color: #333; }
                        </style>
                    </head>
                    <body>
                        <p><em>${new Date()}</em></p>
                        <p>__________________________________________________________</p>

                        <h2 class="header">ðŸš« BUILD FAILED ðŸš«</h2>

                        ${env.COMMIT_INFO_TEMPLATE}

                        <p>The build has failed unexpectedly. This failure isn't likely to be caused by failing tests.<br>
                        For more information on the failing run visit: ${env.BUILD_URL}</p>

                        <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
                        <p>__________________________________________________________</p>
                    </body>
                </html>
            """
        }
    }
}