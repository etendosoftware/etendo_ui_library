pipeline {
    options {
        // This limits build concurrency to 1 per branch
        disableConcurrentBuilds()
    }

    environment {
        NPM_TOKEN           = credentials('npmjs-access-token')
        CHROMATIC_TOKEN     = credentials('chromatic-access-token')
        EMAIL_ADDRESS       = credentials('email_builds')
        URL_REPO            = 'https://bitbucket.org/koodu_software/etendo_ui_library'
        COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

    }

    agent { label 'jenkins-jenkins-agent' }

    stages {
        stage('Build Environment') {
            when {
                expression {
                    ISUPGRADECOMMIT = sh (script: "git log -1 | grep 'Upgrade version to'", returnStatus: true)
                    ISUPGRADECOMMIT != 0
                }
            }
            steps {
                script {
                    try {
                        env.STATUSBUILD = "1"
                        sh 'echo Building Environment'
                        sh "npm install -g yarn"
                        sh 'npm config set registry "https//registry.npmjs.org/"'
                        sh 'npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN'
                        sh "yarn install"
                        sh "yarn build"
                        sh 'echo Build Succesful'
                    } catch (Exception e) {
                        echo 'BUILD FAILED'
                        currentBuild.result = 'FAILED'
                        error('BUILD FAILED')
                        env.STATUSBUILD = "0"
                    }
                }
            }
        }

        stage('Build Storybook') {
            when {
                expression {
                    ISUPGRADECOMMIT != 0
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                script {
                    try {
                        sh 'echo Build Storybook'
                        sh 'yarn build-storybook'
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'storybook-static/',
                            reportFiles: '*',
                            reportName: 'STORYBOOK',
                            reportTitles: ''
                        ])
                        sh 'echo Published Storybook'
                        env.BUILDSTORYBOOK = "1"
                    } catch (Exception e) {
                        echo 'BUILD STORYBOOK FAILED'
                        currentBuild.result = 'UNSTABLE'
                        unstable('BUILD STORYBOOK FAILED')
                        env.BUILDSTORYBOOK = "0"
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                expression {
                    ISUPGRADECOMMIT != 0
                    env.STATUSBUILD == "1"
                }
            }
            steps {
                script {
                    try {
                        env.STATUSTEST = "1"
                        sh 'echo Running tests'
                        sh 'yarn test'
                        sh 'echo Tests Succesful'
                    } catch (Exception e) {
                        echo 'TEST FAILED'
                        currentBuild.result = 'UNSTABLE'
                        unstable('TEST FAILED')
                        env.STATUSTEST = "0"
                    }
                }
            }
        }
        
        stage('Publish Next Version') {
            when {
                allOf {
                    branch 'develop'
                    expression {
                        ISUPGRADECOMMIT != 0
                        env.STATUSTEST == "1"
                        env.BUILDSTORYBOOK == "1"
                    }
                }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                    withCredentials([usernamePassword(credentialsId: "etendo-bot-bitbucket", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh """
                        git config user.name "Etendo Bot"
                        git config user.email "$GIT_USERNAME"
                        """
                        echo 'Publishing Next Version'
                        sh 'git checkout $GIT_BRANCH'
                        sh 'yarn config set version-git-message "Upgrade version to %s :zap:"'
                        sh 'yarn version --patch'
                        sh 'npm publish --tag next --access public'
                        sh 'GIT_SSH_COMMAND=\"ssh -i ${keyfile}\" git push $GIT_URL'
                    }
                }
                echo 'Publishing Storybook in Chromatic'
                sh 'yes | npx chromatic --project-token=$CHROMATIC_TOKEN --auto-accept-changes'
            }
        }
    }
    
    post {
        always {
            sh 'chmod a+x ./pipelines/build-update.sh'
        }
        success {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_ui_library SUCCESSFUL "Successful" $GIT_USERNAME $GIT_PASSWORD'
                }
            }
            cleanWs deleteDirs: true
        }
        fixed {
            mail to: EMAIL_ADDRESS,
            subject: "âœ… FIXED - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

âœ… ERRORS FIXED âœ…

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>
            
The problems found in the previous run/s have been fixed!  ðŸ’ª
Check out the output in the following link: 
${env.BUILD_URL}
__________________________________________________________
            """
        }
        unstable {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_ui_library FAILED "Failed Tests" $GIT_USERNAME $GIT_PASSWORD'
                }
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš¨ TESTS FAILED - ${currentBuild.fullDisplayName}",
            body: """
${new Date()}
__________________________________________________________

ðŸš¨ BUILD UNSTABLE ðŸš¨

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>
            
Some etendo-ui-library tests have failed!
Check out the output in the following link: 
${env.BUILD_URL}
__________________________________________________________
            """
        }
        failure {
            withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                script {
                    sh './pipelines/build-update.sh etendo_ui_library FAILED "Build Failed" $GIT_USERNAME $GIT_PASSWORD'
                }
            }
            cleanWs deleteDirs: true
            mail to: EMAIL_ADDRESS,
            subject: "ðŸš« ERROR - ${currentBuild.fullDisplayName}",
            body:  """
${new Date()}
__________________________________________________________

ðŸš« ERROR ðŸš«

Commit: ${URL_REPO}/commits/${env.GIT_COMMIT}
Author: ${COMMIT_AUTHOR_NAME} <${COMMIT_AUTHOR_EMAIL}>

The build or publication has failed unexpectedly.
To more information on the failing run visit: ${env.BUILD_URL}
__________________________________________________________
            """
        }
    }
    
}